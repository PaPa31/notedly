import { useQuery } from '@apollo/client';
import React from 'react';
import { Link, withRouter } from 'react-router-dom';
import styled from 'styled-components';
import { IS_LOGGED_IN } from '../gql/query';
import logo from '../img/textblock-logo.svg';
import ButtonAsLink from './ButtonAsLink';

const HeaderBar = styled.header`
    width: 100%;
    padding: 0;
    display: flex;
    height: 64px;
    position: fixed;
    align-items: center;
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25);
    z-index: 1;

a {
    text-decoration: none;
}
button {
    color:#9279ba;
}
button:hover {
    color: #B9A5E2;
}

img {
    padding: 0 3px 0 6px;
    vertical-align: bottom;
}

    @media (min-width: 360px) {
        padding: 0.5em 1em;
        img {
            padding: 0 5px 0 0;
        }
    }
`

const LogoText = styled.h1`
    margin: 0;
    padding: 0;
    display: inline;

@media (min-width: 320px) {
    span {
        padding-right: 6px;
    }
}
`

const UserState = styled.div`
    margin-left: auto;
a {
    text-decoration: underline;
}
`

const LastA = styled.span`
    a {
        display: block
    }
    @media(min-width: 500px) {
        a {
            display: inline-block
        }
    }
`



const Header = props => {
    // –•—É–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, client } = useQuery(IS_LOGGED_IN);
    return (
        <HeaderBar>
            <Link to={'/'}>
                <LogoText>
                    <img src={logo} alt="Textblock Logo" height="40" />
                    TextBlock
                </LogoText>
            </Link>
            {/* –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Å—ã–ª–∫—É log out, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º
 —Å–ª—É—á–∞–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã sign in –∏ sign up */}
            <UserState>
                {data.isLoggedIn ? (
                    <ButtonAsLink
                        onClick={() => {
                            // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
                            localStorage.removeItem('token');
                            // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            client.resetStore();
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            client.writeData({ data: { isLoggedIn: false } });
                            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                            props.history.push('/');
                        }}
                    >
                        Logout üö™
                    </ButtonAsLink>
                ) : (
                        <p>
                            <Link to={'/signin'}>Sign In üîì</Link> or{' '}
                            <LastA><Link to={'/signup'}>Sign Up üîë</Link></LastA>
                        </p>
                    )}
            </UserState>
        </HeaderBar>
    );
}

 export default withRouter(Header);
